//MongoDB autogenerated password: KlnIH7ZDgXIuj8Uf
//MongoDB Connection string: mongodb+srv://goFullStackDB:<password>@cluster0-vqim0.mongodb.net/test?retryWrites=true&w=majority

const express = require( 'express');
const bodyparser = require( 'body-parser');
const mongoose = require('mongoose');
const Recipe = require('./recipes/recipe');

const app = express();

mongoose.connect('mongodb+srv://goFullStackDB:KlnIH7ZDgXIuj8Uf@cluster0-vqim0.mongodb.net/test?retryWrites=true&w=majority', { useNewUrlParser: true, useUnifiedTopology: true})
  .then(() => {
    console.log('Successfully connected to MongoDB Atlas!');
  })
  .catch((error) => {
    console.log('Unable to connect to MongoDB Atlas!');
    console.error(error);
  });

app.use( bodyparser.json());

app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content, Accept, Content-Type, Authorization');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
  next();
});

app.post( '/api/recipes', ( req, res, next) => {
  const recipe = new Recipe({
    title: req.body.title,
    ingredients: req.body.ingredients,
    instructions: req.body.instructions,
    difficulty: req.body.difficulty,
    timeToPrepare: req.body.time
  });
  recipe.save().then(
    () => {
      res.status( 201).json({
        message: 'Post saved successfully!'
      });
    }
  ).catch(
    ( error) => {
      res.status(400).json({
        error: error
      });
    }
  );
});

//Get a single thing from database
app.get('/api/recipes/:id', ( req, res, next) => {
  Recipe.findOne({
    _id: req.params.id
  }).then(
    ( recipes) => {
      res.status( 200).json( recipes);
    }
  ).catch(
    ( error) => {
      res.status( 404).json({
        error: error
      });
    }
  );
});

app.put('/api/recipes/:id', ( req, res, next) => {
  const recipe = new Recipe({
    _id: req.params.id,
    title: req.body.title,
    ingredients: req.body.ingredients,
    instructions: req.body.instructions,
    difficulty: req.body.difficulty,
    timeToPrepare: req.body.time
  });
  Recipe.updateOne({_id: req.params.id}, recipe).then(
    () => {
      res.status(201).json({
        message: 'Recipe updated successfully!'
      });
    }
  ).catch(
    (error) => {
      res.status(400).json({
        error: error
      });
    }
  );
});

// Syntax ok. Delete Items from database.
app.delete('/api/recipes/:id', ( req, res, next) => {
  Recipe.deleteOne({
	  _id: req.params.id
	  }).then(() => {
      res.status( 201).json({
        message: 'Deleted!'
      });
    }).catch(
    ( error) => {
      res.status( 400).json({
        error: error
      });
    });
});

//Get all the things from database
app.use('/api/recipes', ( req, res, next) => {
  Recipe.find().then(
    ( recipe) => {
      res.status(200).json( recipe);
    }
  ).catch(
    ( error) => {
      res.status( 400).json({
        error: error
      });
    }
  );
});

module.exports = app;
//change the position of the s to see if error will be ratified.